#include <fstream>
using namespace std;

/// Программа заключается в том, чтобы спускаться по этажам бинарного дерева и подниматься наверх.
///Мы рассматриваем только те элементы, у которых есть потомки. Когда мы доходим до момента, где нет детей,
///мы начинаем подниматься наверх, добавляя к счетчику единицу, пока не дойдем до корня.

struct element  /// структура для описания элемента кучи
{
    int l; /// левый потомок
    int r; /// правый потомок
    int value; /// значение элемента
};

int height(element* tree, int h)
{
    if (h == -1)  /// если нет потомков, то мы никуда не спускаемся
        return 0;
    else
    {
        int h1 = height(tree, tree[h].l) + 1; /// рекурсивно спускаемся и поднимаемся по левому поддереву
        int h2 = height(tree, tree[h].r) + 1; /// рекурсивно спускаемся и поднимаемся по правому поддереву
        /// за каждый рекурсивный подъем добавляем 1 к h1 и h2 ///
        if (h1 > h2) /// сравниваем возможные высоты и выбираем большую
            return h1;
        else
            return h2;
    }}


int main()
{
   ifstream fin("height.in");
   ofstream fout("height.out");
   int n;
     fin >> n;
   element* tree = new element[n];
   for (int i; i < n; i++)
   {
       fin >> tree[i].value >> tree[i].l >> tree[i].r;
       tree[i].l--;
       tree[i].r--;
   }
   if (n == 0)  /// если нет детей, то высота равна 0
       fout << 0;
   else
       fout << height(tree, 0); /// если дети есть, вызываем функцию для поиска высоты
   fin.close();
   fout.close();
   return 0;
}